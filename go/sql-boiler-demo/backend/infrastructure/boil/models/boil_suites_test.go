// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Likes", testLikes)
	t.Run("Tweets", testTweets)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Likes", testLikesDelete)
	t.Run("Tweets", testTweetsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Likes", testLikesQueryDeleteAll)
	t.Run("Tweets", testTweetsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Likes", testLikesSliceDeleteAll)
	t.Run("Tweets", testTweetsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Likes", testLikesExists)
	t.Run("Tweets", testTweetsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Likes", testLikesFind)
	t.Run("Tweets", testTweetsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Likes", testLikesBind)
	t.Run("Tweets", testTweetsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Likes", testLikesOne)
	t.Run("Tweets", testTweetsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Likes", testLikesAll)
	t.Run("Tweets", testTweetsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Likes", testLikesCount)
	t.Run("Tweets", testTweetsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Likes", testLikesHooks)
	t.Run("Tweets", testTweetsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Likes", testLikesInsert)
	t.Run("Likes", testLikesInsertWhitelist)
	t.Run("Tweets", testTweetsInsert)
	t.Run("Tweets", testTweetsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Likes", testLikesReload)
	t.Run("Tweets", testTweetsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Likes", testLikesReloadAll)
	t.Run("Tweets", testTweetsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Likes", testLikesSelect)
	t.Run("Tweets", testTweetsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Likes", testLikesUpdate)
	t.Run("Tweets", testTweetsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Likes", testLikesSliceUpdateAll)
	t.Run("Tweets", testTweetsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
