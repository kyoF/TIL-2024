// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tweet is an object representing the database table.
type Tweet struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TweetID    string    `boil:"tweet_id" json:"tweet_id" toml:"tweet_id" yaml:"tweet_id"`
	UserID     string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Text       string    `boil:"text" json:"text" toml:"text" yaml:"text"`
	LikesCount null.Int  `boil:"likes_count" json:"likes_count,omitempty" toml:"likes_count" yaml:"likes_count,omitempty"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *tweetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tweetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TweetColumns = struct {
	ID         string
	TweetID    string
	UserID     string
	Text       string
	LikesCount string
	CreatedAt  string
}{
	ID:         "id",
	TweetID:    "tweet_id",
	UserID:     "user_id",
	Text:       "text",
	LikesCount: "likes_count",
	CreatedAt:  "created_at",
}

var TweetTableColumns = struct {
	ID         string
	TweetID    string
	UserID     string
	Text       string
	LikesCount string
	CreatedAt  string
}{
	ID:         "tweets.id",
	TweetID:    "tweets.tweet_id",
	UserID:     "tweets.user_id",
	Text:       "tweets.text",
	LikesCount: "tweets.likes_count",
	CreatedAt:  "tweets.created_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TweetWhere = struct {
	ID         whereHelperint
	TweetID    whereHelperstring
	UserID     whereHelperstring
	Text       whereHelperstring
	LikesCount whereHelpernull_Int
	CreatedAt  whereHelpernull_Time
}{
	ID:         whereHelperint{field: "`tweets`.`id`"},
	TweetID:    whereHelperstring{field: "`tweets`.`tweet_id`"},
	UserID:     whereHelperstring{field: "`tweets`.`user_id`"},
	Text:       whereHelperstring{field: "`tweets`.`text`"},
	LikesCount: whereHelpernull_Int{field: "`tweets`.`likes_count`"},
	CreatedAt:  whereHelpernull_Time{field: "`tweets`.`created_at`"},
}

// TweetRels is where relationship names are stored.
var TweetRels = struct {
	User  string
	Likes string
}{
	User:  "User",
	Likes: "Likes",
}

// tweetR is where relationships are stored.
type tweetR struct {
	User  *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
	Likes LikeSlice `boil:"Likes" json:"Likes" toml:"Likes" yaml:"Likes"`
}

// NewStruct creates a new relationship struct
func (*tweetR) NewStruct() *tweetR {
	return &tweetR{}
}

func (r *tweetR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *tweetR) GetLikes() LikeSlice {
	if r == nil {
		return nil
	}
	return r.Likes
}

// tweetL is where Load methods for each relationship are stored.
type tweetL struct{}

var (
	tweetAllColumns            = []string{"id", "tweet_id", "user_id", "text", "likes_count", "created_at"}
	tweetColumnsWithoutDefault = []string{"tweet_id", "user_id", "text"}
	tweetColumnsWithDefault    = []string{"id", "likes_count", "created_at"}
	tweetPrimaryKeyColumns     = []string{"id"}
	tweetGeneratedColumns      = []string{}
)

type (
	// TweetSlice is an alias for a slice of pointers to Tweet.
	// This should almost always be used instead of []Tweet.
	TweetSlice []*Tweet
	// TweetHook is the signature for custom Tweet hook methods
	TweetHook func(context.Context, boil.ContextExecutor, *Tweet) error

	tweetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tweetType                 = reflect.TypeOf(&Tweet{})
	tweetMapping              = queries.MakeStructMapping(tweetType)
	tweetPrimaryKeyMapping, _ = queries.BindMapping(tweetType, tweetMapping, tweetPrimaryKeyColumns)
	tweetInsertCacheMut       sync.RWMutex
	tweetInsertCache          = make(map[string]insertCache)
	tweetUpdateCacheMut       sync.RWMutex
	tweetUpdateCache          = make(map[string]updateCache)
	tweetUpsertCacheMut       sync.RWMutex
	tweetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tweetAfterSelectMu sync.Mutex
var tweetAfterSelectHooks []TweetHook

var tweetBeforeInsertMu sync.Mutex
var tweetBeforeInsertHooks []TweetHook
var tweetAfterInsertMu sync.Mutex
var tweetAfterInsertHooks []TweetHook

var tweetBeforeUpdateMu sync.Mutex
var tweetBeforeUpdateHooks []TweetHook
var tweetAfterUpdateMu sync.Mutex
var tweetAfterUpdateHooks []TweetHook

var tweetBeforeDeleteMu sync.Mutex
var tweetBeforeDeleteHooks []TweetHook
var tweetAfterDeleteMu sync.Mutex
var tweetAfterDeleteHooks []TweetHook

var tweetBeforeUpsertMu sync.Mutex
var tweetBeforeUpsertHooks []TweetHook
var tweetAfterUpsertMu sync.Mutex
var tweetAfterUpsertHooks []TweetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tweet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tweet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tweet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tweet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tweet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tweet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tweet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tweet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tweet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTweetHook registers your hook function for all future operations.
func AddTweetHook(hookPoint boil.HookPoint, tweetHook TweetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tweetAfterSelectMu.Lock()
		tweetAfterSelectHooks = append(tweetAfterSelectHooks, tweetHook)
		tweetAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tweetBeforeInsertMu.Lock()
		tweetBeforeInsertHooks = append(tweetBeforeInsertHooks, tweetHook)
		tweetBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tweetAfterInsertMu.Lock()
		tweetAfterInsertHooks = append(tweetAfterInsertHooks, tweetHook)
		tweetAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tweetBeforeUpdateMu.Lock()
		tweetBeforeUpdateHooks = append(tweetBeforeUpdateHooks, tweetHook)
		tweetBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tweetAfterUpdateMu.Lock()
		tweetAfterUpdateHooks = append(tweetAfterUpdateHooks, tweetHook)
		tweetAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tweetBeforeDeleteMu.Lock()
		tweetBeforeDeleteHooks = append(tweetBeforeDeleteHooks, tweetHook)
		tweetBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tweetAfterDeleteMu.Lock()
		tweetAfterDeleteHooks = append(tweetAfterDeleteHooks, tweetHook)
		tweetAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tweetBeforeUpsertMu.Lock()
		tweetBeforeUpsertHooks = append(tweetBeforeUpsertHooks, tweetHook)
		tweetBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tweetAfterUpsertMu.Lock()
		tweetAfterUpsertHooks = append(tweetAfterUpsertHooks, tweetHook)
		tweetAfterUpsertMu.Unlock()
	}
}

// One returns a single tweet record from the query.
func (q tweetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tweet, error) {
	o := &Tweet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tweets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tweet records from the query.
func (q tweetQuery) All(ctx context.Context, exec boil.ContextExecutor) (TweetSlice, error) {
	var o []*Tweet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tweet slice")
	}

	if len(tweetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tweet records in the query.
func (q tweetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tweets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tweetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tweets exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Tweet) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Likes retrieves all the like's Likes with an executor.
func (o *Tweet) Likes(mods ...qm.QueryMod) likeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`likes`.`tweet_id`=?", o.TweetID),
	)

	return Likes(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tweetL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTweet interface{}, mods queries.Applicator) error {
	var slice []*Tweet
	var object *Tweet

	if singular {
		var ok bool
		object, ok = maybeTweet.(*Tweet)
		if !ok {
			object = new(Tweet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTweet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTweet))
			}
		}
	} else {
		s, ok := maybeTweet.(*[]*Tweet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTweet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTweet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tweetR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tweetR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Tweets = append(foreign.R.Tweets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Tweets = append(foreign.R.Tweets, local)
				break
			}
		}
	}

	return nil
}

// LoadLikes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tweetL) LoadLikes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTweet interface{}, mods queries.Applicator) error {
	var slice []*Tweet
	var object *Tweet

	if singular {
		var ok bool
		object, ok = maybeTweet.(*Tweet)
		if !ok {
			object = new(Tweet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTweet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTweet))
			}
		}
	} else {
		s, ok := maybeTweet.(*[]*Tweet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTweet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTweet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tweetR{}
		}
		args[object.TweetID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tweetR{}
			}
			args[obj.TweetID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`likes`),
		qm.WhereIn(`likes.tweet_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load likes")
	}

	var resultSlice []*Like
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice likes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on likes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for likes")
	}

	if len(likeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Likes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &likeR{}
			}
			foreign.R.Tweet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TweetID == foreign.TweetID {
				local.R.Likes = append(local.R.Likes, foreign)
				if foreign.R == nil {
					foreign.R = &likeR{}
				}
				foreign.R.Tweet = local
				break
			}
		}
	}

	return nil
}

// SetUser of the tweet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Tweets.
func (o *Tweet) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `tweets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, tweetPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &tweetR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Tweets: TweetSlice{o},
		}
	} else {
		related.R.Tweets = append(related.R.Tweets, o)
	}

	return nil
}

// AddLikes adds the given related objects to the existing relationships
// of the tweet, optionally inserting them as new records.
// Appends related to o.R.Likes.
// Sets related.R.Tweet appropriately.
func (o *Tweet) AddLikes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Like) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TweetID = o.TweetID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `likes` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"tweet_id"}),
				strmangle.WhereClause("`", "`", 0, likePrimaryKeyColumns),
			)
			values := []interface{}{o.TweetID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TweetID = o.TweetID
		}
	}

	if o.R == nil {
		o.R = &tweetR{
			Likes: related,
		}
	} else {
		o.R.Likes = append(o.R.Likes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &likeR{
				Tweet: o,
			}
		} else {
			rel.R.Tweet = o
		}
	}
	return nil
}

// Tweets retrieves all the records using an executor.
func Tweets(mods ...qm.QueryMod) tweetQuery {
	mods = append(mods, qm.From("`tweets`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tweets`.*"})
	}

	return tweetQuery{q}
}

// FindTweet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTweet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Tweet, error) {
	tweetObj := &Tweet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tweets` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tweetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tweets")
	}

	if err = tweetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tweetObj, err
	}

	return tweetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tweet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tweets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tweetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tweetInsertCacheMut.RLock()
	cache, cached := tweetInsertCache[key]
	tweetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tweetAllColumns,
			tweetColumnsWithDefault,
			tweetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tweetType, tweetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tweetType, tweetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tweets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tweets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tweets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tweetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tweets")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tweetMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tweets")
	}

CacheNoHooks:
	if !cached {
		tweetInsertCacheMut.Lock()
		tweetInsertCache[key] = cache
		tweetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tweet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tweet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tweetUpdateCacheMut.RLock()
	cache, cached := tweetUpdateCache[key]
	tweetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tweetAllColumns,
			tweetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tweets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tweets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tweetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tweetType, tweetMapping, append(wl, tweetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tweets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tweets")
	}

	if !cached {
		tweetUpdateCacheMut.Lock()
		tweetUpdateCache[key] = cache
		tweetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tweetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tweets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tweets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TweetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tweetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tweets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tweetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tweet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tweet")
	}
	return rowsAff, nil
}

var mySQLTweetUniqueColumns = []string{
	"id",
	"tweet_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tweet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tweets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tweetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTweetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tweetUpsertCacheMut.RLock()
	cache, cached := tweetUpsertCache[key]
	tweetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tweetAllColumns,
			tweetColumnsWithDefault,
			tweetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tweetAllColumns,
			tweetPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tweets, could not build update column list")
		}

		ret := strmangle.SetComplement(tweetAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`tweets`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tweets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tweetType, tweetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tweetType, tweetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tweets")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tweetMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tweetType, tweetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tweets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tweets")
	}

CacheNoHooks:
	if !cached {
		tweetUpsertCacheMut.Lock()
		tweetUpsertCache[key] = cache
		tweetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tweet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tweet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tweet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tweetPrimaryKeyMapping)
	sql := "DELETE FROM `tweets` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tweets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tweets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tweetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tweetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tweets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tweets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TweetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tweetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tweetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tweets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tweetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tweet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tweets")
	}

	if len(tweetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tweet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTweet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TweetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TweetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tweetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tweets`.* FROM `tweets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tweetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TweetSlice")
	}

	*o = slice

	return nil
}

// TweetExists checks if the Tweet row exists.
func TweetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tweets` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tweets exists")
	}

	return exists, nil
}

// Exists checks if the Tweet row exists.
func (o *Tweet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TweetExists(ctx, exec, o.ID)
}
